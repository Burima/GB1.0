@model GBAdmin.Web.Models.RegisterViewModel
@using GBAdmin.Web.Services
@{
    ViewBag.Title = "Register";
    var showMessage = TempData["Message"] != null ? true : false;
}


@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4>Create a local account.</h4>
    <hr />
    @*@Html.ValidationSummary()*@
    <div class="form-group">
        @Html.LabelFor(m => m.FirstName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control charAlone" })
            @*<input name="model.FirstName" class="form-control" data-val="true" />*@
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.LastName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control charAlone" })
            @*<input name="model.LastName" class="form-control" data-val="true" />*@
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            @*<input name="model.Email" class="form-control" data-val="true" />*@
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "Password" })
            @*<input name="model.Password" type="password" class="form-control" data-val="true" />*@
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control"})
            @*<input name="model.ConfirmPassword" type="password" class="form-control" data-val="true" />*@
        </div>
    </div>
     <div class="form-group">
        @Html.LabelFor(m => m.PhoneNumber, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control numbersAlone", maxlength = "10" })
            @*<input name="model.PhoneNumber" class="form-control" data-val="true" />*@
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.RoleName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
           @if (Session["Role"].ToString().ToUpper() == Constants.Roles.SuperAdmin.ToString().ToUpper())
           {
            @Html.DropDownListFor(m => m.RoleName, new List<SelectListItem>
                    { new SelectListItem { Text = "Admin", Value = "Admin"},
                    new SelectListItem { Text = "Manager", Value = "Manager"},
                    new SelectListItem { Text = "Employee", Value = "Employee"},
                    new SelectListItem { Text = "Marketing", Value = "Marketing"},
                    new SelectListItem { Text = "Telecaller", Value = "Telecaller"},
                    new SelectListItem { Text = "Sales", Value = "Sales"},
               }, "Select Roles", new { @class = "form-control" })
           }
           else if (Session["Role"].ToString().ToUpper() == Constants.Roles.Admin.ToString().ToUpper())
           {
            @Html.DropDownListFor(m => m.RoleName, new List<SelectListItem>{
                    new SelectListItem { Text = "Manager", Value = "Manager"},
                    new SelectListItem { Text = "Employee", Value = "Employee"},
                    new SelectListItem { Text = "Marketing", Value = "Marketing"},
                    new SelectListItem { Text = "Telecaller", Value = "Telecaller"},
                    new SelectListItem { Text = "Sales", Value = "Sales"},
               }, "Select Roles", new { @class = "form-control" })
           }
           else if (Session["Role"].ToString().ToUpper() == Constants.Roles.Manager.ToString().ToUpper())
           {
            @Html.DropDownListFor(m => m.RoleName, new List<SelectListItem>{
                    new SelectListItem { Text = "Employee", Value = "Employee"},
                    new SelectListItem { Text = "Marketing", Value = "Marketing"},
                    new SelectListItem { Text = "Telecaller", Value = "Telecaller"},
                    new SelectListItem { Text = "Sales", Value = "Sales"},
               }, "Select Roles", new { @class = "form-control" })
           }
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-primary" value="Register" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        $(".numbersAlone").on("keyup keydown keypress", function (event) { return isNumberKey(event); });
        $(".charAlone").on(" keydown ", function (event) { return isCharField(event); });
        $('#modalShowMessage').modal('show');
        $("#Password").attr('data-toggle', 'popover').attr('data-placement', 'bottom').attr('title', 'Your Password must have:').attr('data-content', '<span style="text-align:left;">Minimum 8 characters<br/>At least one capital letter,<br/>A number<br/>And a special character !@@#$%^&</span> ').popover({ trigger: 'hover', html: true });
    });
    </script>
}
