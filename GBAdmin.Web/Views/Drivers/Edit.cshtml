@model GBAdmin.Web.Models.DriverViewModel
@using GBAdmin.Web.Services
@{
    ViewBag.Title = "Edit";
}
<style>
    .attached-with {
        font-size: 15px;
        padding-bottom: 7%;
    }

        .attached-with label {
            font-weight: normal;
        }

        .attached-with input[type=checkbox] {
            height: 15px;
            width: 15px;
            margin-left: 2%;
        }

    #Message {
        margin-top: 2%;
        background: #1ab394;
        color: white;
        padding: 1%;
        margin-bottom: 2%;
        display: none;
        height: 36px;
        /*height: 76px;*/
    }

        #Message .msg-close {
            cursor: pointer;
        }
</style>
@*<div class="modal inmodal fade in hidden" id="modalShowMessage" tabindex="-1" role="dialog" aria-hidden="false" style="display: block;">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Message</h4>
                </div>
                <div class="modal-body">
                    <p id="editDriverMessage">

                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary center-block modalClose" data-dismiss="modal">Done</button>
                </div>
            </div>
        </div>
    </div>*@
@using (Ajax.BeginForm("Edit", "Drivers", new { ReturnUrl = ViewBag.ReturnUrl }, new AjaxOptions() { OnSuccess = "editDriverSuccess", OnFailure = "editDriverFailed", HttpMethod = "Post" }, new { @class = "form-horizontal", role = "form", id = "form-EditDriver", autocomplete = "off" }))
{
    <div class="form-group">
        <div id="Message"><span class="pull-left msg-text"></span><span class="pull-right msg-close">X</span></div>
    </div>
    <div class="row  border-bottom white-bg dashboard-header">

        <div class="col-sm-12">
            <div class="ibox-content">
                <div class="panel-body">
                    <div class="panel-group" id="accordion">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h5 class="panel-title">
                                    <a id="linkCollapsePersonalDetails" data-toggle="collapse" data-parent="#accordion" href="#collapsePersonalDetails">Personal Details</a>
                                </h5>
                            </div>
                            <div id="collapsePersonalDetails" class="panel-collapse collapse in">
                                <div class="panel-body">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.FirstName, new { @class = "col-md-2 control-label" })
                                        <div class="col-md-10">
                                            @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control charAlone", maxlength = "50", placeholder = "First Name", tabIndex = "1" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.LastName, new { @class = "col-md-2 control-label" })
                                        @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                        <div class="col-md-10">
                                            @Html.TextBoxFor(model => model.LastName, new { @class = "form-control charAlone", maxlength = "50", placeholder = "Last Name", tabIndex = "2" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PhoneNumber, new { @class = "col-md-2 control-label" })
                                        <div class="col-md-10">
                                            @if (Session["Role"].ToString().ToUpper() == Constants.Roles.SuperAdmin.ToString().ToUpper()
                                                || Session["Role"].ToString().ToUpper() == Constants.Roles.Admin.ToString().ToUpper()
                                                || Session["Role"].ToString().ToUpper() == Constants.Roles.Manager.ToString().ToUpper())
                                            {
                                            @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                            @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control numbersAlone", maxlength = "10", placeholder = "Phone Number", tabIndex = "3" })
                                            }
                                            else
                                            {
                                            @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                            @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control numbersAlone", maxlength = "10", disabled = "disabled", placeholder = "Phone Number", tabIndex = "3" })
                                            }

                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Pincode, new { @class = "col-md-2 control-label" })
                                        <div class="col-md-10">
                                            @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                            @Html.TextBoxFor(model => model.Pincode, new { @class = "form-control numbersAlone", maxlength = "7", placeholder = "Pincode", tabIndex = "4" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="pull-right" style="padding-right:5%">
                                            <button id="btnNextPersonalDetails" class="btn btn-primary" type="button" tabindex="5">Next</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a id="linkCollapseProfessionalDetails" data-toggle="collapse" data-parent="#accordion" href="#">Professional Details</a>
                                </h4>
                            </div>
                            <div id="collapseProfessionalDetails" class="panel-collapse collapse">
                                <div class="panel-body">
                                    <div class="form-group">
                                        @Html.Label("License Type", new { @class = "col-md-2 control-label" })
                                        <div class="col-md-10">
                                            @Html.DropDownListFor(m => m.LicenceType, new List<SelectListItem>
                                                 { new SelectListItem { Text = "LMV", Value = "1"},
                                                   new SelectListItem { Text = "LMV-NT", Value = "2"},
                                                   new SelectListItem { Text = "LMV-TR", Value = "3"},
                                                    new SelectListItem { Text = "HMV", Value = "4"},
                                                    new SelectListItem { Text = "HPMV", Value = "5"},
                                                    new SelectListItem { Text = "HGMV", Value = "6"},
                                                    new SelectListItem { Text = "LMV-CAB", Value = "7"},
                                                    new SelectListItem { Text = "Others", Value = "8"},
                                              }, "License Type", new { @class = "form-control", tabIndex = "1" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.LicenceNo, new { @class = "col-md-2 control-label" })
                                        @if (Session["Role"].ToString().ToUpper() == Constants.Roles.SuperAdmin.ToString().ToUpper()
                                            || Session["Role"].ToString().ToUpper() == Constants.Roles.Admin.ToString().ToUpper()
                                                || Session["Role"].ToString().ToUpper() == Constants.Roles.Manager.ToString().ToUpper())
                                        {
                                            <div class="col-md-10">
                                                @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                                @Html.TextBoxFor(model => model.LicenceNo, new { @class = "form-control", maxlength = "50", placeholder = "License Number", tabIndex = "2" })
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-md-10">
                                                @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                                @Html.TextBoxFor(model => model.LicenceNo, new { @class = "form-control", maxlength = "50", placeholder = "License Number", tabIndex = "3", disabled = "disabled" })
                                            </div>

                                        }

                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(m => m.ExpectedSalary, new { @class = "col-md-2 control-label" })
                                        <div class="col-md-10">
                                            @*<input type="text" class="form-control" placeholder="First Name" name="model.FirstName" maxlength="50" tabindex="1" data-val="true" readonly />*@
                                            @Html.TextBoxFor(model => model.ExpectedSalary, new { @class = "col-md-6 form-control numbersAlone", maxlength = "5", placeholder = "Expected Salary in INR", tabIndex = "4" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Status, new { @class = "col-md-2 control-label" })
                                        <div class="col-md-10">

                                            @if (Session["Role"].ToString().ToUpper() == Constants.Roles.SuperAdmin.ToString().ToUpper()
                                                || Session["Role"].ToString().ToUpper() == Constants.Roles.Admin.ToString().ToUpper())
                                            {
                                                @Html.DropDownListFor(m => m.Status, new List<SelectListItem>
                                                 { new SelectListItem { Text = "New", Value = "1"},
                                                   new SelectListItem { Text = "Approved", Value = "2"},
                                                   new SelectListItem { Text = "Rejected", Value = "3"},
                                                    new SelectListItem { Text = "Have Licence", Value = "4"},
                                                    new SelectListItem { Text = "Applied For Licence", Value = "5"},
                                                    new SelectListItem { Text = "Learner Received", Value = "6"},
                                                    new SelectListItem { Text = "Licence Received", Value = "7"},
                                                    new SelectListItem { Text = "Attached to UBER", Value = "8"},
                                                   }, "Select Status", new { @class = "form-control ddlDriverStatus", tabIndex = "5" })
                                            }
                                            else if (Session["Role"].ToString().ToUpper() == Constants.Roles.Manager.ToString().ToUpper()
                                           || Session["Role"].ToString().ToUpper() == Constants.Roles.Employee.ToString().ToUpper())
                                            {
                                                @Html.DropDownListFor(m => m.Status, new List<SelectListItem>
                                                 {  new SelectListItem { Text = "New", Value = "1"},
                                                    new SelectListItem { Text = "Have Licence", Value = "4"},
                                                    new SelectListItem { Text = "Applied For Licence", Value = "5"},
                                                    new SelectListItem { Text = "Learner Received", Value = "6"},
                                                    new SelectListItem { Text = "Licence Received", Value = "7"},
                                                    new SelectListItem { Text = "Attached to UBER", Value = "8"},
                                                   }, "Select Status", new { @class = "form-control ddlDriverStatus", tabIndex = "5" })
                                            }
                                            else if (Session["Role"].ToString().ToUpper() == Constants.Roles.Telecaller.ToString().ToUpper())
                                            {
                                                @Html.DropDownListFor(m => m.Status, new List<SelectListItem>
                                                 {
                                                   new SelectListItem { Text = "Approved", Value = "2"},
                                                   new SelectListItem { Text = "Rejected", Value = "3"},
                                                 }, "Select Status", new { @class = "form-control ddlDriverStatus", tabIndex = "5" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(m => m.Status, new List<SelectListItem>
                                                 { new SelectListItem { Text = "New", Value = "1"},
                                                   new SelectListItem { Text = "Approved", Value = "2"},
                                                   new SelectListItem { Text = "Rejected", Value = "3"},
                                                    new SelectListItem { Text = "Have Licence", Value = "4"},
                                                    new SelectListItem { Text = "Applied For Licence", Value = "5"},
                                                    new SelectListItem { Text = "Learner Received", Value = "6"},
                                                    new SelectListItem { Text = "Licence Received", Value = "7"},
                                                    new SelectListItem { Text = "Attached to UBER", Value = "8"},
                                                   }, "Select Status", new { @class = "form-control ddlDriverStatus", disabled = "disabled", tabIndex = "5" })
                                            }

                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Registered In", new { @class = "col-md-2 control-label" })
                                        <div class="attached-with">
                                            <div class="col-md-10">
                                                <div class="col-md-4">
                                                    <label>Uber</label>@Html.CheckBoxFor(model => model.Uber, new { @class = "form-control", tabIndex = "6" })
                                                </div>
                                                <div class="col-md-4">
                                                    <label>Ola</label>@Html.CheckBoxFor(model => model.Ola, new { @class = "form-control", tabIndex = "7" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="pull-right" style="padding-right:5%">
                                            <button id="btnSaveAllInformation" class="btn btn-primary" type="submit" tabindex="8">Done</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

}

@section Scripts{
    <script>
        var DriversListUrl = '@Url.Action("List","Drivers")';
        $(document).ready(function () {
            $(".numbersAlone").on("keyup keydown keypress", function (event) { return isNumberKey(event); });
            $(".charAlone").on(" keydown ", function (event) { return isCharField(event); });

            $(".ddlDriverStatus").find("option[value=New]").attr('disabled', true);
        });

        $('#btnNextPersonalDetails').click(function () {
            if ($('#form-EditDriver').valid()) {
                //hide BasicInformation upon valid data
                $('#collapsePersonalDetails').removeClass('in');
                //google api function

                //initialization of the map based on area and city
                // initialize();
                $('#linkCollapseProfessionalDetails').attr('href', '#collapseProfessionalDetails'); //activate collapseable functionality through linking it with the target id
                $('#collapseProfessionalDetails').addClass('in');//open Locality panel
            }
        });

        $('#linkCollapsePersonalDetails').click(function () {
            $('#linkCollapseProfessionalDetails').removeAttr('href', '#collapseProfessionalDetails');
            $('#collapseProfessionalDetails').removeClass('in');
        });
        //$('.modalClose').click(function () {
        //    $('#modalShowMessage').addClass("hidden");
        //    window.location.href = "/Drivers/List";
        //})
        var editDriverSuccess = function (data) {
            if (data.Success) {
                $('#form-EditDriver #Message .msg-text').html(data.Message).parent('#Message').css('background-color', '#1ab394').show('slow').delay(5000).hide('slow', function () {
                    window.location.href = DriversListUrl;
                });
            } else {
                $('#form-EditDriver #Message .msg-text').html(data.Message).parent('#Message').css('background-color', '#a94442').show('slow').delay(5000).hide('slow', function () {
                    //$(this).prop('disabled', false);
                });
            }
        };

        var editDriverFailed = function (data) {
            $('#form-EditDriver #Message .msg-text').html(data.Message).parent('#Message').css('background-color', '#a94442').show('slow').delay(5000).hide('slow', function () {
                //$(this).prop('disabled', false);
            });
        };
    </script>
}



